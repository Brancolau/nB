import sqlite3
import tkinter as tk
from tkinter import messagebox


# Função para conectar ao banco de dados
def connect():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS data (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        quantity INTEGER NOT NULL,
        observation TEXT
    )
    """)
    conn.commit()
    conn.close()


# Função para inserir dados no banco de dados
def insert_data(name, quantity, observation=""):
    if check_duplicate(name):
        update_quantity(name, quantity)
    else:
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO data (name, quantity, observation) VALUES (?, ?, ?)", (name, quantity, observation))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", "Data inserted successfully")
    display_data()


# Função para atualizar a quantidade no banco de dados
def update_quantity(name, additional_quantity):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT quantity FROM data WHERE name=?", (name,))
    result = cursor.fetchone()
    if result:
        current_quantity = result[0]
        new_quantity = current_quantity + additional_quantity
        cursor.execute("UPDATE data SET quantity=? WHERE name=?", (new_quantity, name))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", "Quantity updated successfully")
        display_data()


# Função para deletar ou atualizar a quantidade dos dados no banco de dados
def delete_data(name, quantity_to_remove):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT quantity FROM data WHERE name=?", (name,))
    result = cursor.fetchone()

    if result:
        current_quantity = result[0]
        if current_quantity >= quantity_to_remove:
            new_quantity = current_quantity - quantity_to_remove
            if new_quantity > 0:
                cursor.execute("UPDATE data SET quantity=? WHERE name=?", (new_quantity, name))
            else:
                cursor.execute("DELETE FROM data WHERE name=?", (name,))
            conn.commit()
            conn.close()
            messagebox.showinfo("Success", "Data updated successfully")
            display_data()
        else:
            messagebox.showwarning("Quantity Error", "Not enough quantity to remove")
            conn.close()
    else:
        messagebox.showwarning("Not Found", "Component not found in the database")


# Função para exibir dados do banco de dados
def display_data():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM data")
    rows = cursor.fetchall()
    conn.close()
    listbox.delete(0, tk.END)
    for row in rows:
        listbox.insert(tk.END, row)


# Função para verificar duplicata
def check_duplicate(name):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM data WHERE name=?", (name,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


# Função para adicionar dados
def add_data():
    name = entry_name.get()
    quantity = entry_quantity.get()
    observation = entry_observation.get()
    if name and quantity:
        insert_data(name, int(quantity), observation)
    else:
        messagebox.showwarning("Input Error", "Please fill out the name and quantity fields")


# Função para remover dados
def remove_data():
    name = entry_name.get()
    quantity_to_remove = entry_quantity.get()
    if name and quantity_to_remove:
        delete_data(name, int(quantity_to_remove))
    else:
        messagebox.showwarning("Input Error", "Please provide the name and quantity to remove")


# Configuração da interface gráfica
root = tk.Tk()
root.title("Database Manager")

frame = tk.Frame(root)
frame.pack(pady=10)

tk.Label(frame, text="Name:").grid(row=0, column=0, padx=5, pady=5)
entry_name = tk.Entry(frame)
entry_name.grid(row=0, column=1, padx=5, pady=5)

tk.Label(frame, text="Quantity:").grid(row=1, column=0, padx=5, pady=5)
entry_quantity = tk.Entry(frame)
entry_quantity.grid(row=1, column=1, padx=5, pady=5)

tk.Label(frame, text="Observation:").grid(row=2, column=0, padx=5, pady=5)
entry_observation = tk.Entry(frame)
entry_observation.grid(row=2, column=1, padx=5, pady=5)

button_frame = tk.Frame(root)
button_frame.pack(pady=10)

tk.Button(button_frame, text="Add Data", command=add_data).grid(row=0, column=0, padx=5)
tk.Button(button_frame, text="Remove Data", command=remove_data).grid(row=0, column=1, padx=5)

listbox = tk.Listbox(root, width=80, height=15)
listbox.pack(pady=10)

connect()
display_data()

root.mainloop()
